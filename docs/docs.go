// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/login": {
            "get": {
                "description": "获取用户列表",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户信息"
                ],
                "summary": "用户登录",
                "responses": {
                    "0": {
                        "description": "查询成功",
                        "schema": {
                            "$ref": "#/definitions/controllers.UserSwagger"
                        }
                    },
                    "20001": {
                        "description": "Token鉴权失败",
                        "schema": {
                            "$ref": "#/definitions/utils.JSON_STRUCT"
                        }
                    },
                    "20002": {
                        "description": "Token已超时",
                        "schema": {
                            "$ref": "#/definitions/utils.JSON_STRUCT"
                        }
                    },
                    "20004": {
                        "description": "Token错误",
                        "schema": {
                            "$ref": "#/definitions/utils.JSON_STRUCT"
                        }
                    },
                    "20005": {
                        "description": "Token参数不能为空",
                        "schema": {
                            "$ref": "#/definitions/utils.JSON_STRUCT"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.JSON_STRUCT"
                        }
                    }
                }
            }
        },
        "/api/register": {
            "get": {
                "description": "使用用户名密码注册成为新用户\n用户名不能为空，密码不能为空",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "用户信息"
                ],
                "summary": "用户注册",
                "parameters": [
                    {
                        "type": "string",
                        "description": "用户名",
                        "name": "username",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "密码",
                        "name": "password",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "0": {
                        "description": "查询成功",
                        "schema": {
                            "$ref": "#/definitions/controllers.UserSwagger"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.JSON_STRUCT"
                        }
                    }
                }
            }
        },
        "/api/sms": {
            "post": {
                "description": "用户注册、找回密码时需要用到",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "手机短信"
                ],
                "summary": "发送手机验证码",
                "parameters": [
                    {
                        "type": "string",
                        "description": "设备ID",
                        "name": "deviceid",
                        "in": "header"
                    },
                    {
                        "type": "string",
                        "description": "手机号",
                        "name": "mobile",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "0": {
                        "description": "发送成功",
                        "schema": {
                            "$ref": "#/definitions/utils.JSON_STRUCT"
                        }
                    },
                    "1": {
                        "description": "发送达到上限",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "参数错误",
                        "schema": {
                            "$ref": "#/definitions/utils.JSON_STRUCT"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.User": {
            "type": "object",
            "properties": {
                "created_by": {
                    "type": "string"
                },
                "created_on": {
                    "type": "integer"
                },
                "deleted_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "modified_by": {
                    "type": "string"
                },
                "modified_on": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controllers.UserSwagger": {
            "type": "object",
            "properties": {
                "lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.User"
                    }
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "utils.JSON_STRUCT": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {
                    "type": "object"
                },
                "msg": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "BasicAuth": {
            "type": "basic"
        },
        "OAuth2AccessCode": {
            "type": "oauth2",
            "flow": "accessCode",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information"
            }
        },
        "OAuth2Application": {
            "type": "oauth2",
            "flow": "application",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Implicit": {
            "type": "oauth2",
            "flow": "implicit",
            "authorizationUrl": "https://example.com/oauth/authorize",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "write": " Grants write access"
            }
        },
        "OAuth2Password": {
            "type": "oauth2",
            "flow": "password",
            "tokenUrl": "https://example.com/oauth/token",
            "scopes": {
                "admin": " Grants read and write access to administrative information",
                "read": " Grants read access",
                "write": " Grants write access"
            }
        }
    },
    "x-extension-openapi": {
        "example": "value on a json format"
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/api",
	Schemes:     []string{},
	Title:       "Swagger Example API",
	Description: "This is a sample server celler server.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
